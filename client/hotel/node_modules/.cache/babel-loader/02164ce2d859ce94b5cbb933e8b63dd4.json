{"ast":null,"code":"import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport Greeter from \"../artifacts/contracts/hotelManagement.sol/hotelManagement.json\"; // The contract address\n\nconst contractAddress = \"0x0165878A594ca255338adfa4d48449f69242Eb8F\";\nexport async function requestAccount() {\n  await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n}\nexport async function createPayment(userId, payment, rooms) {\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n\n    try {\n      const transaction = await contract.createPayment(userId, payment, rooms);\n      const transactionReceipt = await transaction.wait(); // Check if the transaction was successful\n\n      if (transactionReceipt.status === 1) {\n        console.log(transactionReceipt); // Retrieve the emitted event\n\n        const filter = contract.filters.PaymentCreated(null);\n        const events = await contract.queryFilter(filter, transactionReceipt.blockHash);\n        const result = events[0].args[0];\n\n        if (result === false) {\n          alert(\"error\");\n          throw new Error();\n        }\n      } else {\n        console.log(\"Transaction failed.\");\n      }\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/Projects/Hotel-management-Mern-stack-/client/hotel/src/utils/smartContract.js"],"names":["useState","ethers","Greeter","contractAddress","requestAccount","window","ethereum","request","method","createPayment","userId","payment","rooms","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","transaction","transactionReceipt","wait","status","console","log","filter","filters","PaymentCreated","events","queryFilter","blockHash","result","args","alert","Error","error"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,iEAApB,C,CACA;;AACA,MAAMC,eAAe,GAAG,4CAAxB;AACA,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAxB,CAAN;AACD;AACD,OAAO,eAAeC,aAAf,CAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,KAA9C,EAAqD;AAC1D,MAAI,OAAOP,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,UAAMF,cAAc,EAApB;AAEA,UAAMS,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCV,MAAM,CAACC,QAAzC,CAAjB;AACA,UAAMU,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,QAAX,CAAoBhB,eAApB,EAAoCD,OAAO,CAACkB,GAA5C,EAAiDJ,MAAjD,CAAjB;;AAEA,QAAI;AACF,YAAMK,WAAW,GAAG,MAAMH,QAAQ,CAACT,aAAT,CAAuBC,MAAvB,EAA+BC,OAA/B,EAAwCC,KAAxC,CAA1B;AACA,YAAMU,kBAAkB,GAAG,MAAMD,WAAW,CAACE,IAAZ,EAAjC,CAFE,CAIF;;AACA,UAAID,kBAAkB,CAACE,MAAnB,KAA8B,CAAlC,EAAqC;AACnCC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,kBAAZ,EADmC,CAEnC;;AACA,cAAMK,MAAM,GAAGT,QAAQ,CAACU,OAAT,CAAiBC,cAAjB,CAAgC,IAAhC,CAAf;AACA,cAAMC,MAAM,GAAG,MAAMZ,QAAQ,CAACa,WAAT,CAAqBJ,MAArB,EAA6BL,kBAAkB,CAACU,SAAhD,CAArB;AACA,cAAMC,MAAM,GAAGH,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAV,CAAe,CAAf,CAAf;;AACA,YAAGD,MAAM,KAAG,KAAZ,EAAkB;AAChBE,UAAAA,KAAK,CAAC,OAAD,CAAL;AACA,gBAAM,IAAIC,KAAJ,EAAN;AACD;AACF,OAVD,MAUO;AACLX,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AACF,KAlBD,CAkBE,OAAOW,KAAP,EAAc;AACdZ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBW,KAAvB;AACD;AACF;AACF","sourcesContent":["import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport Greeter from \"../artifacts/contracts/hotelManagement.sol/hotelManagement.json\";\n// The contract address\nconst contractAddress = \"0x0165878A594ca255338adfa4d48449f69242Eb8F\";\nexport async function requestAccount() {\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\n  }\n  export async function createPayment(userId, payment, rooms) {\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n  \n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress,Greeter.abi, signer);\n  \n      try {\n        const transaction = await contract.createPayment(userId, payment, rooms);\n        const transactionReceipt = await transaction.wait();\n  \n        // Check if the transaction was successful\n        if (transactionReceipt.status === 1) {\n          console.log(transactionReceipt)\n          // Retrieve the emitted event\n          const filter = contract.filters.PaymentCreated(null);\n          const events = await contract.queryFilter(filter, transactionReceipt.blockHash);\n          const result = events[0].args[0];\n          if(result===false){\n            alert(\"error\")\n            throw new Error\n          }\n        } else {\n          console.log(\"Transaction failed.\");\n        }\n      } catch (error) {\n        console.log(\"Error: \", error);\n      }\n    }\n  }"]},"metadata":{},"sourceType":"module"}