{"ast":null,"code":"import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport Greeter from \"../artifacts/contracts/hotelManagement.sol/hotelManagement.json\"; // The contract address\n\nconst contractAddress = \"0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\";\nexport async function requestAccount() {\n  await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n} // Create a contract instance outside the function\n\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\nconst contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\nexport async function createPayment(userId, payment, rooms) {\n  try {\n    await requestAccount();\n    const currentNonce = await signer.getTransactionCount();\n    const newNonce = currentNonce + 1; // Increment the nonce value\n\n    const transaction = await contract.createPayment(userId, payment, rooms, {\n      nonce: 2\n    });\n    const transactionReceipt = await transaction.wait(); // Check if the transaction was successful\n\n    if (transactionReceipt.status === 1) {\n      console.log(transactionReceipt); // Retrieve the emitted event\n\n      const filter = contract.filters.PaymentCreated(null);\n      const events = await contract.queryFilter(filter, transactionReceipt.blockHash);\n      const result = events[0].args[0];\n      console.log(result);\n      return result;\n    } else {\n      console.log(\"Transaction failed.\");\n    }\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\nexport async function getPermissions() {\n  try {\n    await requestAccount();\n    console.log(\"Hello\");\n    const transaction = await contract.getPermissions();\n    console.log(transaction.length);\n    return transaction; // Check if the transaction was successful\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\nexport async function checkoutRooms(paymentID, rooms) {\n  try {\n    await requestAccount();\n    console.log(\"Hello\");\n    const transaction = await contract.checkoutRooms(paymentID, rooms);\n    console.log(transaction.length);\n    const filter = contract.filters.PaymentCreated(null);\n    const events = await contract.queryFilter(filter, transactionReceipt.blockHash);\n    const result = events[0].args[0];\n    console.log(result);\n    return result; // Check if the transaction was successful\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/Projects/Hotel-management-Mern-stack-/client/hotel/src/utils/smartContract.js"],"names":["useState","ethers","Greeter","contractAddress","requestAccount","window","ethereum","request","method","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","createPayment","userId","payment","rooms","currentNonce","getTransactionCount","newNonce","transaction","nonce","transactionReceipt","wait","status","console","log","filter","filters","PaymentCreated","events","queryFilter","blockHash","result","args","error","getPermissions","length","checkoutRooms","paymentID"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport Greeter from \"../artifacts/contracts/hotelManagement.sol/hotelManagement.json\";\n\n// The contract address\nconst contractAddress = \"0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\";\n\nexport async function requestAccount() {\n  await window.ethereum.request({ method: \"eth_requestAccounts\" });\n}\n\n// Create a contract instance outside the function\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\nconst contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n\nexport async function createPayment(userId, payment, rooms) {\n  try {\n    await requestAccount();\n\n    const currentNonce = await signer.getTransactionCount();\n    const newNonce = currentNonce + 1; // Increment the nonce value\n\n    const transaction = await contract.createPayment(userId, payment, rooms, {\n      nonce:2,\n    });\n    const transactionReceipt = await transaction.wait();\n\n    // Check if the transaction was successful\n    if (transactionReceipt.status === 1) {\n      console.log(transactionReceipt);\n      // Retrieve the emitted event\n      const filter = contract.filters.PaymentCreated(null);\n      const events = await contract.queryFilter(filter, transactionReceipt.blockHash);\n      const result = events[0].args[0];\n      console.log(result);\n      return result;\n    } else {\n      console.log(\"Transaction failed.\");\n    }\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\n\nexport async function getPermissions() {\n  try {\n    await requestAccount();\n    console.log(\"Hello\");\n\n    const transaction = await contract.getPermissions();\n    console.log(transaction.length);\n    return transaction\n\n    // Check if the transaction was successful\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\n  export async function checkoutRooms(paymentID,rooms) {\n    try {\n      await requestAccount();\n      console.log(\"Hello\");\n  \n      const transaction = await contract.checkoutRooms(paymentID,rooms);\n      console.log(transaction.length);\n      const filter = contract.filters.PaymentCreated(null);\n      const events = await contract.queryFilter(filter, transactionReceipt.blockHash);\n      const result = events[0].args[0];\n      console.log(result);\n      return result;\n      // Check if the transaction was successful\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}