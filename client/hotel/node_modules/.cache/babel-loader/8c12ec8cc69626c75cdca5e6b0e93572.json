{"ast":null,"code":"import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport Greeter from \"../artifacts/contracts/hotelManagement.sol/hotelManagement.json\";\nimport constants from '../utils/constants.json';\nconst contractAddress = constants.key;\nexport async function requestAccount() {\n  await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n}\nexport async function createPayment(userId, payment, rooms) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n\n  try {\n    await requestAccount();\n    const currentNonce = await signer.getTransactionCount();\n    const transaction = await contract.createPayment(userId, payment, rooms, {\n      nonce: 2\n    });\n    const transactionReceipt = await transaction.wait();\n\n    if (transactionReceipt.status === 1) {\n      console.log(transactionReceipt);\n      const filter = contract.filters.PaymentCreated(null);\n      const events = await contract.queryFilter(filter, transactionReceipt.blockHash);\n      const result = events[0].args[0];\n      console.log(result);\n      return result;\n    } else {\n      console.log(\"Transaction failed.\");\n    }\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\nexport async function getPermissions() {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n\n  try {\n    await requestAccount();\n    console.log(\"Hello\");\n    const transaction = await contract.getPermissions();\n    console.log(transaction.length);\n    return transaction;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\nexport async function checkoutRooms(paymentID, rooms) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n\n  try {\n    await requestAccount();\n    console.log(\"Hello\");\n    console.log(rooms);\n    const transaction = await contract.checkoutRooms(paymentID, rooms);\n    await transaction.wait();\n    console.log(transaction.length);\n    const filter = contract.filters.RoomsCheckedOut(null);\n    const events = await contract.queryFilter(filter, transaction.blockHash);\n    const result = events[0].args[0];\n    return result;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\nexport async function approve(userId) {\n  try {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n    const sender = await signer.getAddress();\n    console.log(sender);\n    console.log(userId);\n    await contract.approvePayment(sender, userId).then(() => {\n      console.log(\"hello\");\n    });\n    const data = await transaction.wait();\n    const transaction2 = \"\";\n\n    if (transaction.status == 1) {\n      console.log(\"helllo\");\n      transaction2 = await contract.callStatis().getPayment(sender, userId);\n      await transaction2.wait();\n    }\n\n    console.log(transaction);\n    console.log(transaction2);\n    return false;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\nexport async function Checkcout(roomId) {\n  try {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n    console.log(roomId);\n    const transaction = await contract.userCheckout(roomId);\n    await transaction.wait();\n    const filter = contract.filters.userCheckedOut(null);\n    const events = await contract.queryFilter(filter, transaction.blockHash);\n    const result = events[0].args[0];\n    console.log(result);\n    return result;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\n_c = Checkcout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkcout\");","map":{"version":3,"sources":["/Users/macbook/Desktop/Projects/Hotel-management-Mern-stack-/client/hotel/src/utils/smartContract.js"],"names":["useState","ethers","Greeter","constants","contractAddress","key","requestAccount","window","ethereum","request","method","createPayment","userId","payment","rooms","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","currentNonce","getTransactionCount","transaction","nonce","transactionReceipt","wait","status","console","log","filter","filters","PaymentCreated","events","queryFilter","blockHash","result","args","error","getPermissions","length","checkoutRooms","paymentID","RoomsCheckedOut","approve","sender","getAddress","approvePayment","then","data","transaction2","callStatis","getPayment","Checkcout","roomId","userCheckout","userCheckedOut"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport Greeter from \"../artifacts/contracts/hotelManagement.sol/hotelManagement.json\";\nimport constants from '../utils/constants.json'\nconst contractAddress = constants.key\nexport async function requestAccount() {\n  await window.ethereum.request({ method: \"eth_requestAccounts\" });\n}\nexport async function createPayment(userId, payment, rooms) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\nconst contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n  try {\n    await requestAccount();\n\n    const currentNonce = await signer.getTransactionCount();\n    const transaction = await contract.createPayment(userId, payment, rooms, {\n      nonce:2,\n    });\n    const transactionReceipt = await transaction.wait();\n    if (transactionReceipt.status === 1) {\n      console.log(transactionReceipt);\n      const filter = contract.filters.PaymentCreated(null);\n      const events = await contract.queryFilter(filter, transactionReceipt.blockHash);\n      const result = events[0].args[0];\n      console.log(result);\n      return result;\n    } else {\n      console.log(\"Transaction failed.\");\n    }\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\n\nexport async function getPermissions() {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\nconst contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n  try {\n    await requestAccount();\n    console.log(\"Hello\");\n\n    const transaction = await contract.getPermissions();\n    console.log(transaction.length);\n    return transaction\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\n  export async function checkoutRooms(paymentID,rooms) {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\nconst contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n    try {\n      await requestAccount();\n      console.log(\"Hello\");\n      console.log(rooms)\n      const transaction = await contract.checkoutRooms(paymentID,rooms);\n      await transaction.wait();\n      console.log(transaction.length);\n      const filter = contract.filters.RoomsCheckedOut(null);\n      const events = await contract.queryFilter(filter,  transaction.blockHash);\n      const result = events[0].args[0];\n      return result;\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n    \n}\nexport async function approve(userId) {\n  try {\n    await requestAccount();\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n\n    const sender = await signer.getAddress();\n    console.log(sender);\n    console.log(userId);\n\n    await contract.approvePayment(sender, userId).then(()=>{\n      console.log(\"hello\")\n    });\n    const data=await transaction.wait();\n    const transaction2=\"\"\n    if(transaction.status==1){\n      console.log(\"helllo\")\n      transaction2=await contract.callStatis().getPayment(sender, userId);\n      await transaction2.wait()\n    }\n    console.log(transaction);\n    console.log(transaction2)\n    return false;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}\n\n\n\n\n\n\n\nexport async function Checkcout(roomId) {\n  try {\n    await requestAccount();\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, Greeter.abi, signer);\n    console.log(roomId)\n    const transaction = await contract.userCheckout(roomId);\n    await transaction.wait();\n\n    const filter = contract.filters.userCheckedOut(null);\n    const events = await contract.queryFilter(filter, transaction.blockHash);\n    const result = events[0].args[0];\n    console.log(result)\n    return result;\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n}"]},"metadata":{},"sourceType":"module"}