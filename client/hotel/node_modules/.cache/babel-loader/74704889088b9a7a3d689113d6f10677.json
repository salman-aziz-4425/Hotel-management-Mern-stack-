{"ast":null,"code":"'use strict';\n\nconst u = require('universalify').fromCallback;\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst copy = require('../copy').copy;\n\nconst remove = require('../remove').remove;\n\nconst mkdirp = require('../mkdirs').mkdirp;\n\nconst pathExists = require('../path-exists').pathExists;\n\nfunction move(src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  const overwrite = opts.overwrite || opts.clobber || false;\n  src = path.resolve(src);\n  dest = path.resolve(dest);\n  if (src === dest) return fs.access(src, cb);\n  fs.stat(src, (err, st) => {\n    if (err) return cb(err);\n\n    if (st.isDirectory() && isSrcSubdir(src, dest)) {\n      return cb(new Error(`Cannot move '${src}' to a subdirectory of itself, '${dest}'.`));\n    }\n\n    mkdirp(path.dirname(dest), err => {\n      if (err) return cb(err);\n      return doRename(src, dest, overwrite, cb);\n    });\n  });\n}\n\nfunction doRename(src, dest, overwrite, cb) {\n  if (overwrite) {\n    return remove(dest, err => {\n      if (err) return cb(err);\n      return rename(src, dest, overwrite, cb);\n    });\n  }\n\n  pathExists(dest, (err, destExists) => {\n    if (err) return cb(err);\n    if (destExists) return cb(new Error('dest already exists.'));\n    return rename(src, dest, overwrite, cb);\n  });\n}\n\nfunction rename(src, dest, overwrite, cb) {\n  fs.rename(src, dest, err => {\n    if (!err) return cb();\n    if (err.code !== 'EXDEV') return cb(err);\n    return moveAcrossDevice(src, dest, overwrite, cb);\n  });\n}\n\nfunction moveAcrossDevice(src, dest, overwrite, cb) {\n  const opts = {\n    overwrite,\n    errorOnExist: true\n  };\n  copy(src, dest, opts, err => {\n    if (err) return cb(err);\n    return remove(src, cb);\n  });\n}\n\nfunction isSrcSubdir(src, dest) {\n  const srcArray = src.split(path.sep);\n  const destArray = dest.split(path.sep);\n  return srcArray.reduce((acc, current, i) => {\n    return acc && destArray[i] === current;\n  }, true);\n}\n\nmodule.exports = {\n  move: u(move)\n};","map":{"version":3,"sources":["/Users/macbook/Desktop/Projects/Hotel-management-Mern-stack-/client/hotel/node_modules/hardhat/node_modules/fs-extra/lib/move/index.js"],"names":["u","require","fromCallback","fs","path","copy","remove","mkdirp","pathExists","move","src","dest","opts","cb","overwrite","clobber","resolve","access","stat","err","st","isDirectory","isSrcSubdir","Error","dirname","doRename","rename","destExists","code","moveAcrossDevice","errorOnExist","srcArray","split","sep","destArray","reduce","acc","current","i","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst u = require('universalify').fromCallback\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copy = require('../copy').copy\nconst remove = require('../remove').remove\nconst mkdirp = require('../mkdirs').mkdirp\nconst pathExists = require('../path-exists').pathExists\n\nfunction move (src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  src = path.resolve(src)\n  dest = path.resolve(dest)\n\n  if (src === dest) return fs.access(src, cb)\n\n  fs.stat(src, (err, st) => {\n    if (err) return cb(err)\n\n    if (st.isDirectory() && isSrcSubdir(src, dest)) {\n      return cb(new Error(`Cannot move '${src}' to a subdirectory of itself, '${dest}'.`))\n    }\n    mkdirp(path.dirname(dest), err => {\n      if (err) return cb(err)\n      return doRename(src, dest, overwrite, cb)\n    })\n  })\n}\n\nfunction doRename (src, dest, overwrite, cb) {\n  if (overwrite) {\n    return remove(dest, err => {\n      if (err) return cb(err)\n      return rename(src, dest, overwrite, cb)\n    })\n  }\n  pathExists(dest, (err, destExists) => {\n    if (err) return cb(err)\n    if (destExists) return cb(new Error('dest already exists.'))\n    return rename(src, dest, overwrite, cb)\n  })\n}\n\nfunction rename (src, dest, overwrite, cb) {\n  fs.rename(src, dest, err => {\n    if (!err) return cb()\n    if (err.code !== 'EXDEV') return cb(err)\n    return moveAcrossDevice(src, dest, overwrite, cb)\n  })\n}\n\nfunction moveAcrossDevice (src, dest, overwrite, cb) {\n  const opts = {\n    overwrite,\n    errorOnExist: true\n  }\n\n  copy(src, dest, opts, err => {\n    if (err) return cb(err)\n    return remove(src, cb)\n  })\n}\n\nfunction isSrcSubdir (src, dest) {\n  const srcArray = src.split(path.sep)\n  const destArray = dest.split(path.sep)\n\n  return srcArray.reduce((acc, current, i) => {\n    return acc && destArray[i] === current\n  }, true)\n}\n\nmodule.exports = {\n  move: u(move)\n}\n"]},"metadata":{},"sourceType":"script"}